{"version":3,"file":"static/js/91.e2d46c60.chunk.js","mappings":"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","sources":["utils/renderBox.js","utils/detect.js","utils/download.js","App.js"],"sourcesContent":["import labels from \"./labels.json\";\r\n\r\n/**\r\n * Render prediction boxes\r\n * @param {HTMLCanvasElement} canvas canvas tag reference\r\n * @param {Array[Object]} boxes boxes array\r\n */\r\nexport const renderBoxes = (canvas, boxes) => {\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\r\n\r\n  const colors = new Colors();\r\n\r\n  // font configs\r\n  const font = `${Math.max(\r\n    Math.round(Math.max(ctx.canvas.width, ctx.canvas.height) / 40),\r\n    14\r\n  )}px Arial`;\r\n  ctx.font = font;\r\n  ctx.textBaseline = \"top\";\r\n\r\n  boxes.forEach((box) => {\r\n    const klass = labels[box.label];\r\n    const color = colors.get(box.label);\r\n    const score = (box.probability * 100).toFixed(1);\r\n    const [x, y, width, height] = box.bounding;\r\n\r\n    // draw box.\r\n    ctx.fillStyle = Colors.hexToRgba(color, 0.2);\r\n    ctx.fillRect(x, y, width, height);\r\n    // draw border box\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\r\n    ctx.strokeRect(x, y, width, height);\r\n\r\n    // draw the label background.\r\n    ctx.fillStyle = color;\r\n    const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\r\n    const textHeight = parseInt(font, 10); // base 10\r\n    const yText = y - (textHeight + ctx.lineWidth);\r\n    ctx.fillRect(\r\n      x - 1,\r\n      yText < 0 ? 0 : yText,\r\n      textWidth + ctx.lineWidth,\r\n      textHeight + ctx.lineWidth\r\n    );\r\n\r\n    // Draw labels\r\n    ctx.fillStyle = \"#ffffff\";\r\n    ctx.fillText(klass + \" - \" + score + \"%\", x - 1, yText < 0 ? 1 : yText + 1);\r\n  });\r\n};\r\n\r\nclass Colors {\r\n  // ultralytics color palette https://ultralytics.com/\r\n  constructor() {\r\n    this.palette = [\r\n      \"#FF3838\",\r\n      \"#FF9D97\",\r\n      \"#FF701F\",\r\n      \"#FFB21D\",\r\n      \"#CFD231\",\r\n      \"#48F90A\",\r\n      \"#92CC17\",\r\n      \"#3DDB86\",\r\n      \"#1A9334\",\r\n      \"#00D4BB\",\r\n      \"#2C99A8\",\r\n      \"#00C2FF\",\r\n      \"#344593\",\r\n      \"#6473FF\",\r\n      \"#0018EC\",\r\n      \"#8438FF\",\r\n      \"#520085\",\r\n      \"#CB38FF\",\r\n      \"#FF95C8\",\r\n      \"#FF37C7\",\r\n    ];\r\n    this.n = this.palette.length;\r\n  }\r\n\r\n  get = (i) => this.palette[Math.floor(i) % this.n];\r\n\r\n  static hexToRgba = (hex, alpha) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? `rgba(${[parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)].join(\r\n          \", \"\r\n        )}, ${alpha})`\r\n      : null;\r\n  };\r\n}\r\n","import cv from \"@techstark/opencv-js\";\r\nimport { Tensor } from \"onnxruntime-web\";\r\nimport { renderBoxes } from \"./renderBox\";\r\n\r\n/**\r\n * Detect Image\r\n * @param {HTMLImageElement} image Image to detect\r\n * @param {HTMLCanvasElement} canvas canvas to draw boxes\r\n * @param {ort.InferenceSession} session YOLO-NAS onnxruntime session\r\n * @param {Number} topk Integer representing the maximum number of boxes to be selected per class\r\n * @param {Number} iouThreshold Float representing the threshold for deciding whether boxes overlap too much with respect to IOU\r\n * @param {Number} scoreThreshold Float representing the threshold for deciding when to remove boxes based on score\r\n * @param {Number[]} inputShape model input shape. Normally in YOLO model [batch, channels, width, height]\r\n */\r\nexport const detectImage = async (\r\n  image,\r\n  canvas,\r\n  session,\r\n  topk,\r\n  iouThreshold,\r\n  scoreThreshold,\r\n  inputShape\r\n) => {\r\n  const [modelWidth, modelHeight] = inputShape.slice(2);\r\n  const [input, xRatio, yRatio] = preprocessing(image, modelWidth, modelHeight);\r\n\r\n  const tensor = new Tensor(\"float32\", input.data32F, inputShape); // to ort.Tensor\r\n  const config = new Tensor(\r\n    \"float32\",\r\n    new Float32Array([\r\n      topk, // topk per class\r\n      iouThreshold, // iou threshold\r\n      scoreThreshold, // score threshold\r\n    ])\r\n  ); // nms config tensor\r\n  const outNames = session.net.outputNames;\r\n  const output = await session.net.run({ \"input.1\": tensor }); // run session and get output layer\r\n  const { selected } = await session.nms.run({ bboxes: output[outNames[0]], scores: output[outNames[1]], config: config }); // perform nms and filter boxes\r\n\r\n  const boxes = [];\r\n\r\n  // looping through output\r\n  for (let idx = 0; idx < selected.dims[1]; idx++) {\r\n    const data = selected.data.slice(idx * selected.dims[2], (idx + 1) * selected.dims[2]); // get rows\r\n    const box = data.slice(0, 4);\r\n    const scores = data.slice(4); // classes probability scores\r\n    const score = Math.max(...scores); // maximum probability scores\r\n    const label = scores.indexOf(score); // class id of maximum probability scores\r\n\r\n    const [x, y, w, h] = [\r\n      box[0] * xRatio, // upscale left\r\n      box[1] * yRatio, // upscale top\r\n      (box[2] - box[0]) * xRatio, // upscale width\r\n      (box[3] - box[1]) * yRatio, // upscale height\r\n    ]; // keep boxes in maxSize range\r\n\r\n    boxes.push({\r\n      label: label,\r\n      probability: score,\r\n      bounding: [x, y, w, h], // upscale box\r\n    }); // update boxes to draw later\r\n  }\r\n\r\n  renderBoxes(canvas, boxes); // Draw boxes\r\n  input.delete(); // delete unused Mat\r\n};\r\n\r\n/**\r\n * Preprocessing image\r\n * @param {HTMLImageElement} source image source\r\n * @param {Number} modelWidth model input width\r\n * @param {Number} modelHeight model input height\r\n * @return preprocessed image and configs\r\n */\r\nconst preprocessing = (source, modelWidth, modelHeight) => {\r\n  const mat = cv.imread(source); // read from img tag\r\n  const matC3 = new cv.Mat(mat.rows, mat.cols, cv.CV_8UC3); // new image matrix\r\n  cv.cvtColor(mat, matC3, cv.COLOR_RGBA2BGR); // RGBA to BGR\r\n\r\n  // padding image to [n x n] dim\r\n  const maxSize = Math.max(matC3.rows, matC3.cols); // get max size from width and height\r\n  const xPad = maxSize - matC3.cols, // set xPadding\r\n    xRatio = maxSize / matC3.cols; // set xRatio\r\n  const yPad = maxSize - matC3.rows, // set yPadding\r\n    yRatio = maxSize / matC3.rows; // set yRatio\r\n  const matPad = new cv.Mat(); // new mat for padded image\r\n  cv.copyMakeBorder(matC3, matPad, 0, yPad, 0, xPad, cv.BORDER_CONSTANT); // padding black\r\n\r\n  const input = cv.blobFromImage(\r\n    matPad,\r\n    1 / 255.0, // normalize\r\n    new cv.Size(modelWidth, modelHeight), // resize to model input size\r\n    new cv.Scalar(0, 0, 0),\r\n    true, // swapRB\r\n    false // crop\r\n  ); // preprocessing image matrix\r\n\r\n  // release mat opencv\r\n  mat.delete();\r\n  matC3.delete();\r\n  matPad.delete();\r\n\r\n  return [input, xRatio, yRatio];\r\n};\r\n","export const download = (url, logger = null) => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.responseType = \"arraybuffer\";\r\n    if (logger) {\r\n      const [log, setState] = logger;\r\n      request.onprogress = (e) => {\r\n        const progress = (e.loaded / e.total) * 100;\r\n        setState({ text: log, progress: progress.toFixed(2) });\r\n      };\r\n    }\r\n    request.onload = function () {\r\n      if (this.status >= 200 && this.status < 300) {\r\n        resolve(request.response);\r\n      } else {\r\n        reject({\r\n          status: this.status,\r\n          statusText: request.statusText,\r\n        });\r\n      }\r\n      resolve(request.response);\r\n    };\r\n    request.onerror = function () {\r\n      reject({\r\n        status: this.status,\r\n        statusText: request.statusText,\r\n      });\r\n    };\r\n    request.send();\r\n  });\r\n};\r\n","import React, { useState, useRef } from \"react\";\r\nimport cv from \"@techstark/opencv-js\";\r\nimport { Tensor, InferenceSession } from \"onnxruntime-web\";\r\nimport Loader from \"./components/loader\";\r\nimport { detectImage } from \"./utils/detect\";\r\nimport { download } from \"./utils/download\";\r\nimport \"./style/App.css\";\r\n\r\nconst App = () => {\r\n  const [session, setSession] = useState(null);\r\n  const [loading, setLoading] = useState({ text: \"Loading OpenCV.js\", progress: null });\r\n  const [image, setImage] = useState(null);\r\n  const inputImage = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // configs\r\n  const modelName = \"yolo_nas_s.onnx\";\r\n  const modelInputShape = [1, 3, 640, 640];\r\n  const topk = 100;\r\n  const iouThreshold = 0.45;\r\n  const scoreThreshold = 0.2;\r\n\r\n  // wait until opencv.js initialized\r\n  cv[\"onRuntimeInitialized\"] = async () => {\r\n    const baseModelURL = `${process.env.PUBLIC_URL}/model`;\r\n\r\n    // create session\r\n    const arrBufNet = await download(\r\n      `${baseModelURL}/${modelName}`, // url\r\n      [\"Loading YOLO-NAS model\", setLoading] // logger\r\n    ); // get model arraybuffer\r\n    const yoloNAS = await InferenceSession.create(arrBufNet);\r\n    const arrBufNMS = await download(\r\n      `${baseModelURL}/nms-yolo-nas.onnx`, // url\r\n      [\"Loading NMS model\", setLoading] // logger\r\n    ); // get nms model arraybuffer\r\n    const nms = await InferenceSession.create(arrBufNMS);\r\n\r\n    // warmup main model\r\n    setLoading({ text: \"Warming up model...\", progress: null });\r\n    const tensor = new Tensor(\r\n      \"float32\",\r\n      new Float32Array(modelInputShape.reduce((a, b) => a * b)),\r\n      modelInputShape\r\n    );\r\n    await yoloNAS.run({ \"input.1\": tensor });\r\n\r\n    setSession({ net: yoloNAS, nms: nms });\r\n    setLoading(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {loading && (\r\n        <Loader>\r\n          {loading.progress ? `${loading.text} - ${loading.progress}%` : loading.text}\r\n        </Loader>\r\n      )}\r\n      <div className=\"header\">\r\n        <h1>YOLO-NAS Object Detection App</h1>\r\n        <p>\r\n          YOLO-NAS object detection application live on browser powered by{\" \"}\r\n          <strong>onnxruntime-web</strong>\r\n        </p>\r\n        <p>\r\n          Serving : <code>{modelName}</code>\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <img\r\n          ref={imageRef}\r\n          src=\"#\"\r\n          alt=\"\"\r\n          style={{ display: image ? \"block\" : \"none\" }}\r\n          onLoad={() => {\r\n            detectImage(\r\n              imageRef.current,\r\n              canvasRef.current,\r\n              session,\r\n              topk,\r\n              iouThreshold,\r\n              scoreThreshold,\r\n              modelInputShape\r\n            );\r\n          }}\r\n        />\r\n        <canvas\r\n          id=\"canvas\"\r\n          width={modelInputShape[2]}\r\n          height={modelInputShape[3]}\r\n          ref={canvasRef}\r\n        />\r\n      </div>\r\n\r\n      <input\r\n        type=\"file\"\r\n        ref={inputImage}\r\n        accept=\"image/*\"\r\n        style={{ display: \"none\" }}\r\n        onChange={(e) => {\r\n          // handle next image to detect\r\n          if (image) {\r\n            URL.revokeObjectURL(image);\r\n            setImage(null);\r\n          }\r\n\r\n          const url = URL.createObjectURL(e.target.files[0]); // create image url\r\n          imageRef.current.src = url; // set image source\r\n          setImage(url);\r\n        }}\r\n      />\r\n      <div className=\"btn-container\">\r\n        <button\r\n          onClick={() => {\r\n            inputImage.current.click();\r\n          }}\r\n        >\r\n          Open local image\r\n        </button>\r\n        {image && (\r\n          /* show close btn when there is image */\r\n          <button\r\n            onClick={() => {\r\n              inputImage.current.value = \"\";\r\n              imageRef.current.src = \"#\";\r\n              URL.revokeObjectURL(image);\r\n              setImage(null);\r\n            }}\r\n          >\r\n            Close image\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"names":["renderBoxes","canvas","boxes","ctx","getContext","clearRect","width","height","colors","Colors","font","Math","max","round","textBaseline","forEach","box","klass","labels","label","color","get","score","probability","toFixed","bounding","x","y","fillStyle","hexToRgba","fillRect","strokeStyle","lineWidth","min","strokeRect","textWidth","measureText","textHeight","parseInt","yText","fillText","i","palette","floor","n","this","length","hex","alpha","result","exec","join","detectImage","image","session","topk","iouThreshold","scoreThreshold","inputShape","slice","modelWidth","modelHeight","preprocessing","input","xRatio","yRatio","tensor","Tensor","data32F","config","Float32Array","outNames","net","outputNames","run","output","nms","bboxes","scores","selected","idx","dims","data","indexOf","w","h","push","delete","source","mat","cv","matC3","rows","cols","maxSize","xPad","yPad","matPad","download","url","logger","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","log","setState","onprogress","e","progress","loaded","total","text","onload","status","response","statusText","onerror","send","useState","setSession","loading","setLoading","setImage","inputImage","useRef","imageRef","canvasRef","modelName","modelInputShape","baseModelURL","process","arrBufNet","InferenceSession","yoloNAS","arrBufNMS","reduce","a","b","className","ref","src","alt","style","display","onLoad","current","id","type","accept","onChange","URL","revokeObjectURL","createObjectURL","target","files","onClick","click","value"],"sourceRoot":""}