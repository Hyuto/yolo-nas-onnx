{"version":3,"file":"static/js/965.b2340f46.chunk.js","mappings":"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","sources":["utils/renderBox.js","utils/detect.js","utils/utils.js","utils/processing.js","App.js"],"sourcesContent":["/**\r\n * Render prediction boxes\r\n * @param {HTMLCanvasElement} canvas canvas tag reference\r\n * @param {Array[Object]} boxes boxes array\r\n */\r\nexport const renderBoxes = (ctx, boxes, labels) => {\r\n  const colors = new Colors();\r\n\r\n  // font configs\r\n  const font = `${Math.max(\r\n    Math.round(Math.max(ctx.canvas.width, ctx.canvas.height) / 40),\r\n    14\r\n  )}px Arial`;\r\n  ctx.font = font;\r\n  ctx.textBaseline = \"top\";\r\n\r\n  boxes.forEach((box) => {\r\n    const klass = labels[box.label];\r\n    const color = colors.get(box.label);\r\n    const score = (box.probability * 100).toFixed(1);\r\n    const [x, y, width, height] = box.bounding;\r\n\r\n    // draw box.\r\n    ctx.fillStyle = Colors.hexToRgba(color, 0.2);\r\n    ctx.fillRect(x, y, width, height);\r\n    // draw border box\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\r\n    ctx.strokeRect(x, y, width, height);\r\n\r\n    // draw the label background.\r\n    ctx.fillStyle = color;\r\n    const textWidth = ctx.measureText(klass + \" - \" + score + \"%\").width;\r\n    const textHeight = parseInt(font, 10); // base 10\r\n    const yText = y - (textHeight + ctx.lineWidth);\r\n    ctx.fillRect(\r\n      x - 1,\r\n      yText < 0 ? 0 : yText,\r\n      textWidth + ctx.lineWidth,\r\n      textHeight + ctx.lineWidth\r\n    );\r\n\r\n    // Draw labels\r\n    ctx.fillStyle = \"#ffffff\";\r\n    ctx.fillText(klass + \" - \" + score + \"%\", x - 1, yText < 0 ? 1 : yText + 1);\r\n  });\r\n};\r\n\r\nclass Colors {\r\n  // ultralytics color palette https://ultralytics.com/\r\n  constructor() {\r\n    this.palette = [\r\n      \"#FF3838\",\r\n      \"#FF9D97\",\r\n      \"#FF701F\",\r\n      \"#FFB21D\",\r\n      \"#CFD231\",\r\n      \"#48F90A\",\r\n      \"#92CC17\",\r\n      \"#3DDB86\",\r\n      \"#1A9334\",\r\n      \"#00D4BB\",\r\n      \"#2C99A8\",\r\n      \"#00C2FF\",\r\n      \"#344593\",\r\n      \"#6473FF\",\r\n      \"#0018EC\",\r\n      \"#8438FF\",\r\n      \"#520085\",\r\n      \"#CB38FF\",\r\n      \"#FF95C8\",\r\n      \"#FF37C7\",\r\n    ];\r\n    this.n = this.palette.length;\r\n  }\r\n\r\n  get = (i) => this.palette[Math.floor(i) % this.n];\r\n\r\n  static hexToRgba = (hex, alpha) => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? `rgba(${[parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)].join(\r\n          \", \"\r\n        )}, ${alpha})`\r\n      : null;\r\n  };\r\n}\r\n","import cv from \"@techstark/opencv-js\";\r\nimport { Tensor } from \"onnxruntime-web\";\r\nimport { renderBoxes } from \"./renderBox\";\r\n\r\n/**\r\n * Detect Image\r\n * @param {HTMLImageElement} image Image to detect\r\n * @param {HTMLCanvasElement} canvas canvas to draw boxes\r\n * @param {ort.InferenceSession} session YOLO-NAS onnxruntime session\r\n * @param {Number} topk Integer representing the maximum number of boxes to be selected per class\r\n * @param {Number} iouThreshold Float representing the threshold for deciding whether boxes overlap too much with respect to IOU\r\n * @param {Number} scoreThreshold Float representing the threshold for deciding when to remove boxes based on score\r\n * @param {Number[]} inputShape model input shape. Normally in YOLO model [batch, channels, width, height]\r\n */\r\nexport const detectImage = async (image, canvas, session, { preProcessing, postProcessing }) => {\r\n  canvas.width = image.width;\r\n  canvas.height = image.height;\r\n\r\n  const ctx = canvas.getContext(\"2d\");\r\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\r\n  ctx.drawImage(image, 0, 0, image.width, image.height);\r\n\r\n  const img = cv.imread(image);\r\n  const [input, metadata] = preProcessing.run(img);\r\n\r\n  const tensor = new Tensor(\"float32\", input.data32F, session.inputShape); // to ort.Tensor\r\n  const config = new Tensor(\r\n    \"float32\",\r\n    new Float32Array([\r\n      postProcessing.topk, // topk per class\r\n      postProcessing.iouThresh, // iou threshold\r\n      postProcessing.scoreThresh, // score threshold\r\n    ])\r\n  ); // nms config tensor\r\n  const outNames = session.net.outputNames;\r\n  const output = await session.net.run({ \"input.1\": tensor }); // run session and get output layer\r\n  const { selected } = await session.nms.run({\r\n    bboxes: output[outNames[0]],\r\n    scores: output[outNames[1]],\r\n    config: config,\r\n  }); // perform nms and filter boxes\r\n\r\n  const boxes = [];\r\n\r\n  // looping through output\r\n  for (let idx = 0; idx < selected.dims[1]; idx++) {\r\n    const data = selected.data.slice(idx * selected.dims[2], (idx + 1) * selected.dims[2]); // get rows\r\n    const [box, score, label] = postProcessing.run(data, [...metadata]);\r\n\r\n    boxes.push({\r\n      label: label,\r\n      probability: score,\r\n      bounding: box, // upscale box\r\n    }); // update boxes to draw later\r\n  }\r\n\r\n  renderBoxes(ctx, boxes, postProcessing.labels); // Draw boxes\r\n  input.delete(); // delete unused Mat\r\n};\r\n","import COCO_LABELS from \"./labels.json\";\r\n\r\nexport class Configs {\r\n  baseModelURL = `${process.env.PUBLIC_URL}/model`;\r\n  prepSteps = [\r\n    { DetLongMaxRescale: null },\r\n    { CenterPad: { pad_value: 114 } },\r\n    { Standardize: { max_value: 255.0 } },\r\n  ]; // default YOLO-NAS preprocessing steps\r\n  labels = COCO_LABELS;\r\n\r\n  constructor(inputShape, scoreThresh, iouThresh, topk, customMetadata = null) {\r\n    this.inputShape = inputShape;\r\n    this.scoreThresh = scoreThresh;\r\n    this.iouThresh = iouThresh;\r\n    this.topk = topk;\r\n    this.customMetadata = customMetadata;\r\n  }\r\n\r\n  async _loadMetadata() {\r\n    const res = await fetch(`${this.baseModelURL}/${this.customMetadata}`);\r\n    const metadata = await res.json();\r\n\r\n    this.scoreThresh = metadata[\"score_thres\"];\r\n    this.iouThresh = metadata[\"iou_thres\"];\r\n    this.prepSteps = metadata[\"prep_steps\"];\r\n    this.labels = metadata[\"labels\"];\r\n\r\n    if (JSON.stringify(this.inputShape) !== JSON.stringify(metadata[\"original_insz\"]))\r\n      alert(\"Model have different input shape from what included in metadata!\");\r\n  }\r\n\r\n  async init() {\r\n    if (this.customMetadata) await this._loadMetadata();\r\n  }\r\n}\r\n\r\nexport const download = (url, logger = null) => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n    request.responseType = \"arraybuffer\";\r\n    if (logger) {\r\n      const [log, setState] = logger;\r\n      request.onprogress = (e) => {\r\n        const progress = (e.loaded / e.total) * 100;\r\n        setState({ text: log, progress: progress.toFixed(2) });\r\n      };\r\n    }\r\n    request.onload = function () {\r\n      if (this.status >= 200 && this.status < 300) {\r\n        resolve(request.response);\r\n      } else {\r\n        reject({\r\n          status: this.status,\r\n          statusText: request.statusText,\r\n        });\r\n      }\r\n      resolve(request.response);\r\n    };\r\n    request.onerror = function () {\r\n      reject({\r\n        status: this.status,\r\n        statusText: request.statusText,\r\n      });\r\n    };\r\n    request.send();\r\n  });\r\n};\r\n","import cv from \"@techstark/opencv-js\";\r\n\r\nexport class PreProcessing {\r\n  constructor(steps, output_shape) {\r\n    this.steps = steps;\r\n    this.output_shape = output_shape;\r\n  }\r\n\r\n  __rescale_img(img, dst, out_shape) {\r\n    const size = new cv.Size(...out_shape);\r\n    cv.resize(img, dst, size, 0, 0, cv.INTER_LINEAR);\r\n  }\r\n\r\n  _standarize(img, dst, { max_value }) {\r\n    img.convertTo(dst, cv.CV_32F, 1.0 / max_value, 0);\r\n    return null;\r\n  }\r\n\r\n  _normalize(img, dst, { mean, std }) {\r\n    const meanMat = new cv.Mat(img.rows, img.cols, img.type(), new cv.Scalar(...mean));\r\n    cv.subtract(img, meanMat, dst, new cv.Mat(), cv.CV_32F);\r\n    dst.convertTo(dst, cv.CV_32F, 1.0 / std, 0);\r\n\r\n    meanMat.delete();\r\n    return null;\r\n  }\r\n\r\n  _det_rescale(img, dst) {\r\n    const scale_factors = [this.output_shape[1] / img.rows, this.output_shape[0] / img.cols];\r\n    this.__rescale_img(img, dst, this.output_shape);\r\n\r\n    return { scale_factors: scale_factors };\r\n  }\r\n\r\n  _det_long_max_rescale(img, dst) {\r\n    const scale_factor = Math.min(\r\n      (this.output_shape[1] - 4) / img.rows,\r\n      (this.output_shape[0] - 4) / img.cols\r\n    );\r\n\r\n    if (scale_factor !== 1.0) {\r\n      const new_height = Math.round(img.rows * scale_factor);\r\n      const new_width = Math.round(img.cols * scale_factor);\r\n      this.__rescale_img(img, dst, [new_width, new_height]);\r\n    }\r\n\r\n    return { scale_factors: [scale_factor, scale_factor] };\r\n  }\r\n\r\n  _bot_right_pad(img, dst, { pad_value }) {\r\n    const pad_height = this.output_shape[1] - img.rows;\r\n    const pad_width = this.output_shape[0] - img.cols;\r\n    cv.copyMakeBorder(\r\n      img,\r\n      dst,\r\n      0,\r\n      pad_height,\r\n      0,\r\n      pad_width,\r\n      cv.BORDER_CONSTANT,\r\n      new cv.Scalar(pad_value, pad_value, pad_value)\r\n    );\r\n\r\n    return { padding: [0, pad_height, 0, pad_width] };\r\n  }\r\n\r\n  _center_pad(img, dst, { pad_value }) {\r\n    const pad_height = this.output_shape[1] - img.rows;\r\n    const pad_width = this.output_shape[0] - img.cols;\r\n    const pad_top = Math.floor(pad_height / 2);\r\n    const pad_left = Math.floor(pad_width / 2);\r\n    cv.copyMakeBorder(\r\n      img,\r\n      dst,\r\n      pad_top,\r\n      pad_height - pad_top,\r\n      pad_left,\r\n      pad_width - pad_left,\r\n      cv.BORDER_CONSTANT,\r\n      new cv.Scalar(pad_value, pad_value, pad_value)\r\n    );\r\n    return { padding: [pad_top, pad_height - pad_top, pad_left, pad_width - pad_left] };\r\n  }\r\n\r\n  _call_fn(name) {\r\n    const mapper = {\r\n      Standardize: this._standarize.bind(this),\r\n      DetRescale: this._det_rescale.bind(this),\r\n      DetLongMaxRescale: this._det_long_max_rescale.bind(this),\r\n      BotRightPad: this._bot_right_pad.bind(this),\r\n      CenterPad: this._center_pad.bind(this),\r\n      Normalize: this._normalize.bind(this),\r\n    };\r\n    return mapper[name];\r\n  }\r\n\r\n  run(img) {\r\n    const inputImage = new cv.Mat(img.rows, img.cols, cv.CV_32FC3);\r\n    cv.cvtColor(img, inputImage, cv.COLOR_RGBA2BGR); // RGBA to BGR\r\n\r\n    const metadata = [];\r\n    this.steps.forEach((st) => {\r\n      if (st) {\r\n        const [name, kwargs] = Object.entries(st)[0];\r\n        const meta = kwargs\r\n          ? this._call_fn(name)(inputImage, inputImage, kwargs)\r\n          : this._call_fn(name)(inputImage, inputImage);\r\n        metadata.push(meta);\r\n      }\r\n    });\r\n\r\n    const input_ = cv.blobFromImage(inputImage, 1, new cv.Size(), new cv.Scalar(), true, false);\r\n    inputImage.delete();\r\n    return [input_, metadata];\r\n  }\r\n}\r\n\r\nexport class PostProcessing {\r\n  constructor(steps, iouThresh, scoreThresh, topk, labels) {\r\n    this.steps = steps;\r\n    this.iouThresh = iouThresh;\r\n    this.scoreThresh = scoreThresh;\r\n    this.topk = topk;\r\n    this.labels = labels;\r\n  }\r\n\r\n  _rescale_boxes(box, metadata) {\r\n    const [scale_factors_w, scale_factors_h] = metadata.scale_factors;\r\n    box[0] /= scale_factors_w;\r\n    box[2] /= scale_factors_w;\r\n    box[1] /= scale_factors_h;\r\n    box[3] /= scale_factors_h;\r\n    return box;\r\n  }\r\n\r\n  _shift_bboxes(box, metadata) {\r\n    box[0] -= metadata.padding[2];\r\n    box[2] -= metadata.padding[2];\r\n    box[1] -= metadata.padding[0];\r\n    box[3] -= metadata.padding[0];\r\n    return box;\r\n  }\r\n\r\n  _call_fn(name) {\r\n    const mapper = {\r\n      DetRescale: this._rescale_boxes.bind(this),\r\n      DetLongMaxRescale: this._rescale_boxes.bind(this),\r\n      BotRightPad: this._shift_bboxes.bind(this),\r\n      CenterPad: this._shift_bboxes.bind(this),\r\n      Standardize: null,\r\n      Normalize: null,\r\n    };\r\n    return mapper[name];\r\n  }\r\n\r\n  run(output_row, metadata) {\r\n    let box = output_row.slice(0, 4);\r\n    let scores = output_row.slice(4);\r\n\r\n    this.steps.toReversed().forEach((st) => {\r\n      if (st) {\r\n        const name = Object.entries(st)[0][0];\r\n        const meta = metadata.pop();\r\n        if (this._call_fn(name)) {\r\n          box = this._call_fn(name)(box, meta);\r\n        }\r\n      }\r\n    });\r\n\r\n    box[2] -= box[0];\r\n    box[3] -= box[1];\r\n\r\n    const score = Math.max(...scores); // maximum probability scores\r\n    const label = scores.indexOf(score); // class id of maximum probability scores\r\n    return [box, score, label];\r\n  }\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport cv from \"@techstark/opencv-js\";\r\nimport { Tensor, InferenceSession } from \"onnxruntime-web\";\r\nimport Loader from \"./components/loader\";\r\nimport { detectImage } from \"./utils/detect\";\r\nimport { Configs, download } from \"./utils/utils\";\r\nimport { PreProcessing, PostProcessing } from \"./utils/processing\";\r\nimport \"./style/App.css\";\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState({ text: \"Loading OpenCV.js\", progress: null });\r\n  const [session, setSession] = useState(null);\r\n  const [processing, setProcessing] = useState(null);\r\n  const [image, setImage] = useState(null);\r\n  const inputImage = useRef(null);\r\n  const imageRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // configs\r\n  const modelName = \"yolo_nas_s.onnx\";\r\n  const configs = new Configs(\r\n    [1, 3, 640, 640], // input shape\r\n    0.25, // score threshold\r\n    0.45, // IOU threshold\r\n    100 // topk\r\n    // custom metadata\r\n  );\r\n\r\n  // wait until opencv.js initialized\r\n  cv[\"onRuntimeInitialized\"] = async () => {\r\n    await configs.init();\r\n    const prep = new PreProcessing(configs.prepSteps, [\r\n      configs.inputShape[3],\r\n      configs.inputShape[2],\r\n    ]);\r\n    const postp = new PostProcessing(\r\n      configs.prepSteps,\r\n      configs.iouThresh,\r\n      configs.scoreThresh,\r\n      configs.topk,\r\n      configs.labels\r\n    );\r\n    setProcessing({ preProcessing: prep, postProcessing: postp });\r\n\r\n    // create session\r\n    const arrBufNet = await download(\r\n      `${configs.baseModelURL}/${modelName}`, // url\r\n      [\"Loading YOLO-NAS model\", setLoading] // logger\r\n    ); // get model arraybuffer\r\n    const yoloNAS = await InferenceSession.create(arrBufNet);\r\n    const arrBufNMS = await download(\r\n      `${configs.baseModelURL}/nms-yolo-nas.onnx`, // url\r\n      [\"Loading NMS model\", setLoading] // logger\r\n    ); // get nms model arraybuffer\r\n    const nms = await InferenceSession.create(arrBufNMS);\r\n\r\n    // warmup main model\r\n    setLoading({ text: \"Warming up model...\", progress: null });\r\n    const tensor = new Tensor(\r\n      \"float32\",\r\n      new Float32Array(configs.inputShape.reduce((a, b) => a * b)),\r\n      configs.inputShape\r\n    );\r\n    await yoloNAS.run({ \"input.1\": tensor });\r\n\r\n    setSession({ net: yoloNAS, inputShape: configs.inputShape, nms: nms });\r\n    setLoading(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {loading && (\r\n        <Loader>\r\n          {loading.progress ? `${loading.text} - ${loading.progress}%` : loading.text}\r\n        </Loader>\r\n      )}\r\n      <div className=\"header\">\r\n        <h1>YOLO-NAS Object Detection App</h1>\r\n        <p>\r\n          YOLO-NAS object detection application live on browser powered by{\" \"}\r\n          <strong>onnxruntime-web</strong>\r\n        </p>\r\n        <p>\r\n          Serving : <code>{modelName}</code>\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        <img\r\n          ref={imageRef}\r\n          src=\"#\"\r\n          alt=\"\"\r\n          style={{ display: image ? \"block\" : \"none\" }}\r\n          onLoad={() => {\r\n            detectImage(imageRef.current, canvasRef.current, session, processing);\r\n          }}\r\n        />\r\n        <canvas id=\"canvas\" ref={canvasRef} />\r\n      </div>\r\n\r\n      <input\r\n        type=\"file\"\r\n        ref={inputImage}\r\n        accept=\"image/*\"\r\n        style={{ display: \"none\" }}\r\n        onChange={(e) => {\r\n          // handle next image to detect\r\n          if (image) {\r\n            URL.revokeObjectURL(image);\r\n            setImage(null);\r\n          }\r\n\r\n          const url = URL.createObjectURL(e.target.files[0]); // create image url\r\n          imageRef.current.src = url; // set image source\r\n          setImage(url);\r\n        }}\r\n      />\r\n      <div className=\"btn-container\">\r\n        <button\r\n          onClick={() => {\r\n            inputImage.current.click();\r\n          }}\r\n        >\r\n          Open local image\r\n        </button>\r\n        {image && (\r\n          /* show close btn when there is image */\r\n          <button\r\n            onClick={() => {\r\n              inputImage.current.value = \"\";\r\n              imageRef.current.src = \"#\";\r\n              URL.revokeObjectURL(image);\r\n              setImage(null);\r\n            }}\r\n          >\r\n            Close image\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"names":["renderBoxes","ctx","boxes","labels","colors","Colors","font","Math","max","round","canvas","width","height","textBaseline","forEach","box","klass","label","color","get","score","probability","toFixed","bounding","x","y","fillStyle","hexToRgba","fillRect","strokeStyle","lineWidth","min","strokeRect","textWidth","measureText","textHeight","parseInt","yText","fillText","i","palette","floor","n","this","length","hex","alpha","result","exec","join","detectImage","image","session","preProcessing","postProcessing","getContext","clearRect","drawImage","img","cv","run","input","metadata","tensor","Tensor","data32F","inputShape","config","Float32Array","topk","iouThresh","scoreThresh","outNames","net","outputNames","output","nms","bboxes","scores","selected","idx","dims","data","slice","push","delete","Configs","customMetadata","baseModelURL","process","prepSteps","DetLongMaxRescale","CenterPad","pad_value","Standardize","max_value","COCO_LABELS","fetch","res","json","JSON","stringify","alert","_loadMetadata","download","url","logger","Promise","resolve","reject","request","XMLHttpRequest","open","responseType","log","setState","onprogress","e","progress","loaded","total","text","onload","status","response","statusText","onerror","send","PreProcessing","steps","output_shape","dst","out_shape","size","convertTo","mean","std","meanMat","rows","cols","type","scale_factors","__rescale_img","scale_factor","new_height","new_width","pad_height","pad_width","padding","pad_top","pad_left","name","_standarize","bind","DetRescale","_det_rescale","_det_long_max_rescale","BotRightPad","_bot_right_pad","_center_pad","Normalize","_normalize","inputImage","st","Object","entries","kwargs","meta","_call_fn","input_","PostProcessing","scale_factors_w","scale_factors_h","_rescale_boxes","_shift_bboxes","output_row","toReversed","pop","indexOf","useState","loading","setLoading","setSession","processing","setProcessing","setImage","useRef","imageRef","canvasRef","modelName","configs","init","prep","postp","arrBufNet","InferenceSession","yoloNAS","arrBufNMS","reduce","a","b","className","ref","src","alt","style","display","onLoad","current","id","accept","onChange","URL","revokeObjectURL","createObjectURL","target","files","onClick","click","value"],"sourceRoot":""}